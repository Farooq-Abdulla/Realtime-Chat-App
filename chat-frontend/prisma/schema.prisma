datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  receivedRequests FriendRequest[] @relation("ReceivedRequests")

  sentRequests FriendRequest[] @relation("SentRequests")

  friends1   Friend[] @relation("UserFriends1")
  friends2   Friend[] @relation("UserFriends2")
}

model FriendRequest {
  id         String   @id @default(cuid())
  senderId   String
  sender     User     @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  status     String   @default("pending") // e.g., 'pending', 'accepted', 'declined'
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([senderId, receiverId]) 
}

model Friend {
  id         String   @id @default(cuid())
  user1Id    String
  user1      User     @relation("UserFriends1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2Id    String
  user2      User     @relation("UserFriends2", fields: [user2Id], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  
  @@unique([user1Id, user2Id])
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
